"use strict";var ApplicationConfiguration=function(){var applicationModuleName="cn-devtest",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ngRoute","ui.router","ui.bootstrap","ui.utils","angular-keenio","ngJustGage"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("admin"),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("users"),angular.module("admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Locations","location","item",void 0,!1,["super"]),Menus.addMenuItem("topbar","Dashboard","dash","item",void 0,!1,["user","admin","super"]),Menus.addMenuItem("topbar","Devices","devices","item",void 0,!1,["admin","super"])}]),angular.module("admin").config(["$stateProvider",function($stateProvider){$stateProvider.state("location",{url:"/location",templateUrl:"modules/admin/views/location.client.view.html"}).state("devices",{url:"/devices",templateUrl:"modules/admin/views/admin.client.view.html"})}]),angular.module("admin").controller("AddLocationController",["$scope","$modalInstance","Location",function($scope,$modalInstance,Location){$scope.save=function(){Location.create($scope.location,function(data){$modalInstance.close()})},$scope.cancel=function(){$modalInstance.dismiss()}}]),angular.module("admin").controller("AdminController",["$scope","$modal","Device","Keen","Imp","Authentication",function($scope,$modal,Device,Keen,Imp,Authentication){$scope.authentication=Authentication,$scope.isAboveAdmin=function(){return"super"===$scope.authentication.user.roles[0]||"admin"===$scope.authentication.user.roles[0]?!0:!1},$scope.refresh=function(){$scope.name="",$scope.id="",Device.list(function(data){$scope.devices=data}),Keen.find(function(data){$scope.keen=data})},$scope.addDevice=function(){Imp.setup($scope.id,function(setup){setup.id=$scope.id,setup.name=$scope.name,Device.create(setup,function(data){$scope.refresh()})})},$scope.updateDevice=function(id,index){Device.edit(id,$scope.devices[index],function(data){})},$scope.open=function(id){var modalInstance=$modal.open({animation:!0,templateUrl:"modules/admin/views/edit-device.client.view.html",controller:"EditDeviceController",size:"lg",resolve:{deviceId:function(){return id}}});modalInstance.result.then(function(){$scope.refresh()},function(){$scope.refresh()})}}]),angular.module("admin").controller("EditDeviceController",["$scope","$stateParams","$location","$modalInstance","Device","Keen","Imp","deviceId","Authentication",function($scope,$stateParams,$location,$modalInstance,Device,Keen,Imp,deviceId,Authentication){$scope.authentication=Authentication;var updateDevice=function(){Imp.setBatteryTrigger($scope.device.id,$scope.device.notification.entity.battery.value,function(data){}),Imp.setMoistureTrigger($scope.device.id,$scope.device.notification.entity.moisture.value,function(data){})};$scope.addEmail=function(){$scope.device.notification.contacts.push($scope.email),Imp.addEmail($scope.device.id,$scope.email,function(data){Device.edit($scope.device._id,$scope.device,function(){$scope.email=""})})},$scope.removeEmail=function(index){var email=$scope.device.notification.contacts[index];Imp.removeEmail($scope.device.id,email,function(data){$scope.device.notification.contacts.splice(index,1),Device.edit($scope.device._id,$scope.device,function(){})})},$scope.remove=function(){Device["delete"]($scope.device._id,function(data){$modalInstance.dismiss()})},$scope.editKeen=function(){Keen.edit({projectId:$scope.keen.projectId,readKey:$scope.keen.readKey},function(){$location.path("admin")})},$scope.save=function(){Device.edit($scope.device._id,$scope.device,function(data){updateDevice(),$modalInstance.close()})},$scope.cancel=function(){$modalInstance.dismiss()},$scope.findOne=function(){Device.get(deviceId,function(data){$scope.device=data})}}]),angular.module("admin").controller("LocationController",["$scope","$modal","Authentication","Location",function($scope,$modal,Authentication,Location){$scope.authentication=Authentication;var refresh=function(){Location.list(function(data){$scope.locations=data})};refresh(),$scope.checkUser=function(){return"guest"!==$scope.authentication.user.roles[0]?!0:!1},$scope.open=function(id){var modalInstance=$modal.open({animation:!0,templateUrl:"modules/admin/views/add-location.client.view.html",controller:"AddLocationController",size:"lg",resolve:{deviceId:function(){return id}}});modalInstance.result.then(function(){refresh()},function(){refresh()})}}]),angular.module("admin").factory("Device",["$http",function($http){return{list:function(callback){$http.get("/devices").success(callback)},create:function(device,callback){$http.post("/devices",device).success(callback)},"delete":function(id,callback){$http["delete"]("/devices/"+id).success(callback)},get:function(id,callback){$http.get("/devices/"+id).success(callback)},edit:function(id,device,callback){$http.put("/devices/"+id,device).success(callback)}}}]),angular.module("admin").factory("Keen",["$http",function($http){return{create:function(keen,callback){$http.post("/keen",keen).success(callback)},edit:function(keen,callback){$http.put("/keen",keen).success(callback)},find:function(callback){$http.get("/keen").success(callback)}}}]),angular.module("admin").factory("Location",["$http",function($http){return{create:function(location,callback){$http.post("/location",location).success(callback)},read:function(id,callback){$http.get("/location/"+id).success(callback)},update:function(id,location,callback){$http.put("/location/"+id,location).success(callback)},"delete":function(id,callback){$http["delete"]("/location/"+id).success(callback)},list:function(callback){$http.get("/locations").success(callback)}}}]),angular.module("articles").run(["Menus",function(Menus){}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/create-article.client.view.html"}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(){var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("demo",{url:"/demo",templateUrl:"modules/core/views/dash.client.view.html"}).state("dash",{url:"/dash",templateUrl:"modules/core/views/dash.client.view.html"}).state("showDash",{url:"/dash/:deviceId",templateUrl:"modules/core/views/dash.client.view.html"}).state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").run(["Menus",function(Menus){}]),angular.module("core").controller("DashControllerController",["$scope","$filter","$location","tbkKeen","$http","Imp","Device","Keen",function($scope,$filter,$location,Keen,$http,Imp,Device,Keenio){var _projectId=null,_readKey=null;$scope.interval=3,$scope.read=function(){Imp.getReading($scope.eventCollection.id,function(data){$scope.readings=data,$scope.lastRead=new Date(1e3*data.time)})},$scope.request=function(interval){var keen=new Keen({projectId:_projectId,readKey:_readKey}),queryTable=[{amount:1,semantic:"days"},{amount:3,semantic:"days"},{amount:1,semantic:"weeks"},{amount:2,semantic:"weeks"},{amount:1,semantic:"months"},{amount:3,semantic:"months"}];$scope.read();var chart=(new Keen.Dataviz).el(document.getElementById("qual")).chartType("areachart").width("auto").height(400).chartOptions({hAxis:{chartArea:{height:"100%",left:"0%",top:"0%",width:"100%"},isStacked:!0,format:"hh:mm (d. MMM)"}});chart.prepare();{var _interval="hourly",temp=(new Keen.Query("average",{eventCollection:$scope.eventCollection.id,timeframe:"this_"+queryTable[interval-1].amount+"_"+queryTable[interval-1].semantic,targetProperty:"humidity",interval:_interval}),new Keen.Query("average",{eventCollection:$scope.eventCollection.id,timeframe:"this_"+queryTable[interval-1].amount+"_"+queryTable[interval-1].semantic,targetProperty:"temp",interval:_interval})),moist=new Keen.Query("average",{eventCollection:$scope.eventCollection.id,timeframe:"this_"+queryTable[interval-1].amount+"_"+queryTable[interval-1].semantic,targetProperty:"moisture",interval:_interval}),light=new Keen.Query("average",{eventCollection:$scope.eventCollection.id,timeframe:"this_"+queryTable[interval-1].amount+"_"+queryTable[interval-1].semantic,targetProperty:"lux",interval:_interval});new Keen.Query("average",{eventCollection:$scope.eventCollection.id,timeframe:"this_"+queryTable[interval-1].amount+"_"+queryTable[interval-1].semantic,targetProperty:"battery",interval:_interval})}keen.run([moist,temp,light],function(err,res){if(err)chart.error(err.message);else for(var moist=res[0].result,temp=res[1].result,lux=res[2].result,data=[],i=0;i<moist.length;)data[i]={timeframe:temp[i].timeframe,value:[{category:"Moisture",result:moist[i].value},{category:"Temperature",result:temp[i].value},{category:"Lux / 10",result:lux[i].value/10}]},i===moist.length-1&&chart.parseRawData({result:data}).render(),i++})},$scope.find=function(){Keenio.find(function(_keen){_readKey=_keen.readKey,_projectId=_keen.projectId,Device.list(function(_data){$scope.eventCollections=_data,"/demo"===$location.path()?($scope.eventCollections=$filter("filter")($scope.eventCollections,{"public":!0}),$scope.eventCollection=$scope.eventCollections[0]):$scope.eventCollection=$scope.eventCollections[0],$scope.request(3)})})}}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").factory("Imp",["$http",function($http){var agentUrl="https://agent.electricimp.com/";return{setup:function(impId,callback){var req={method:"POST",url:agentUrl+impId+"/setup",headers:{"Content-Type":"application/json"}};$http(req).success(callback)},getReading:function(impId,callback){var req={method:"GET",url:agentUrl+impId+"/read",headers:{"Content-Type":"application/json"}};$http(req).success(callback)},setKeen:function(impId,keenCollection,callback){var req={method:"POST",url:agentUrl+impId+"/setup/collection/"+keenCollection,headers:{"Content-Type":"application/json"}};$http(req).success(callback)},setDeviceName:function(impId,deviceName,callback){var req={method:"POST",url:agentUrl+impId+"/setup/name/"+deviceName,headers:{"Content-Type":"application/json"}};$http(req).success(callback)},addEmail:function(impId,email,callback){var req={method:"POST",url:agentUrl+impId+"/setup/notification/email/add/"+email,headers:{"Content-Type":"application/json"}};$http(req).success(callback)},removeEmail:function(impId,email,callback){var req={method:"POST",url:agentUrl+impId+"/setup/notification/email/remove/"+email,headers:{"Content-Type":"application/json"}};$http(req).success(callback)},setBatteryTrigger:function(impId,value,callback){var req={method:"POST",url:agentUrl+impId+"/setup/notification/battery/"+value,headers:{"Content-Type":"application/json"}};$http(req).success(callback)},setMoistureTrigger:function(impId,value,callback){var req={method:"POST",url:agentUrl+impId+"/setup/notification/moisture/"+value,headers:{"Content-Type":"application/json"}};$http(req).success(callback)},setWakingInterval:function(impId,value,callback){var req={method:"POST",url:agentUrl+impId+"/setup/config/interval/"+value,headers:{"Content-Type":"application/json"}};$http(req).success(callback)},setCollectAmount:function(impId,value,callback){var req={method:"POST",url:agentUrl+impId+"/setup/config/collect/"+value,headers:{"Content-Type":"application/json"}};$http(req).success(callback)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("users").run(["Menus",function(Menus){}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("manage",{url:"/manage",templateUrl:"modules/users/views/manage.client.view.html"}).state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("guest"!==$scope.authentication.user.roles[0]?"dash":"demo")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("guest"!==$scope.authentication.user.roles[0]?"dash":"demo")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("EditUserController",["$scope","$modalInstance","Userdb","userId",function($scope,$modalInstance,Userdb,userId){$scope.roles=["guest","user","admin","super"],$scope.role=$scope.roles[0],$scope.findOne=function(){Userdb.find(userId,function(data){$scope.user=data,$scope.role=$scope.user.roles[$scope.user.roles.indexOf($scope.user.roles[0])]})},$scope.remove=function(){Userdb["delete"](userId,function(){$modalInstance.close()})},$scope.save=function(){$scope.user.roles[0]=$scope.role,Userdb.update(userId,$scope.user,function(data){$modalInstance.close()})},$scope.cancel=function(){$modalInstance.dismiss()}}]),angular.module("users").controller("ManageController",["$scope","$modal","Authentication","Userdb",function($scope,$modal,Authentication,Userdb){$scope.authentication=Authentication;var find=function(){Userdb.list(function(data){$scope.users=data})};find(),$scope.open=function(id){var modalInstance=$modal.open({animation:!0,templateUrl:"modules/users/views/edit-user.client.view.html",controller:"EditUserController",size:"lg",resolve:{userId:function(){return id}}});modalInstance.result.then(function(){find()},function(){find()})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Userdb",["$http",function($http){return{list:function(callback){$http.get("/users").success(callback)},find:function(id,callback){$http.get("/users/"+id).success(callback)},update:function(id,user,callback){$http.put("/users/"+id,user).success(callback)},"delete":function(id,callback){$http["delete"]("/users/"+id).success(callback)}}}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);